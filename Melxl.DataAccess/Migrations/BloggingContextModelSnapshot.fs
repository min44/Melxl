// <auto-generated />
namespace Melxl.DataAccess.Migrations

open System
open Melxl.DataAccess
open Microsoft.EntityFrameworkCore
open Microsoft.EntityFrameworkCore.Infrastructure
open Microsoft.EntityFrameworkCore.Metadata
open Microsoft.EntityFrameworkCore.Migrations
open Microsoft.EntityFrameworkCore.Storage.ValueConversion

[<DbContext(typeof<EntityProvider.BloggingContext>)>]
type BloggingContextModelSnapshot() =
    inherit ModelSnapshot()

    override this.BuildModel(modelBuilder: ModelBuilder) =
        modelBuilder.HasAnnotation("ProductVersion", "6.0.3") |> ignore

        modelBuilder.Entity("Melxl.DataAccess.EntityProvider+Blog", (fun b ->

            b.Property<int>("Id")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("INTEGER")
                |> ignore

            b.Property<string>("Url")
                .IsRequired(true)
                .HasColumnType("TEXT")
                |> ignore

            b.HasKey("Id")
                |> ignore


            b.ToTable("Blogs") |> ignore

        )) |> ignore

        modelBuilder.Entity("Melxl.DataAccess.EntityProvider+Post", (fun b ->

            b.Property<int>("Id")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("INTEGER")
                |> ignore

            b.Property<int>("BlogId")
                .IsRequired(true)
                .HasColumnType("INTEGER")
                |> ignore

            b.Property<string>("Title")
                .IsRequired(true)
                .HasColumnType("TEXT")
                |> ignore

            b.HasKey("Id")
                |> ignore


            b.HasIndex("BlogId")
                |> ignore

            b.ToTable("Posts") |> ignore

        )) |> ignore
        modelBuilder.Entity("Melxl.DataAccess.EntityProvider+Post", (fun b ->
            b.HasOne("Melxl.DataAccess.EntityProvider+Blog", "Blog")
                .WithMany()
                .HasForeignKey("BlogId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore

        )) |> ignore

